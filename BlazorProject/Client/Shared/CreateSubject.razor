@inject ISubjectsService subjectsService
@inject NavigationManager navManager

<div class="alert-link" style="max-width:50%;">
    <h3>@Title</h3>

    <EditForm Model="Subject" OnSubmit="HandleSubmit">
        <div class="form-group">
            <label for="name">Ime:</label>
            <InputText id="name" class="form-control" @bind-Value="Subject.Name"></InputText>
            <ValidationMessage For="@(() => Subject.Name)" />
        </div>
        <div class="form-group">
            <label for="desc">Opis:</label><br />
            <InputTextArea id="desc" class="form-control" @bind-Value="Subject.Description"></InputTextArea>
        </div>
        <div class="form-group">
            <label for="lecH">Ure predavanj:</label><br />
            <InputNumber id="lecH" class="form-control" @bind-Value="Subject.LectureHours"></InputNumber>
        </div>
        <div class="form-group">
            <label for="tutH">Ure vaj:</label><br />
            <InputNumber id="tutH" class="form-control" @bind-Value="Subject.TutorialHours"></InputNumber>
        </div>
        <div class="form-group">
            <label for="ects">ECTS:</label><br />
            <InputNumber id="ects" class="form-control" @bind-Value="Subject.ECTS"></InputNumber>
        </div>
        <button class="btn btn-primary" type="submit">@SubmitButtonText</button>
        <button class="btn btn-primary" type="button" @onclick="HandleCancel">Prekliči</button>
    </EditForm>
</div>

@code
{
    [Parameter]
    public BlazorProject.Shared.Subject Subject { get; set; } = new BlazorProject.Shared.Subject();

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string SubmitButtonText { get; set; }

    protected async Task HandleSubmit()
    {
        Console.WriteLine($"Calling subject with ID = {Subject.ID}");
        if (Subject.ID == 0)
            await subjectsService.CreateSubject(Subject);
        else
            await subjectsService.UpdateSubject(Subject, Subject.ID);
        navManager.NavigateTo("/subjects");
    }

    protected void HandleCancel()
    {
        navManager.NavigateTo("/subjects");
    }

    protected override void OnInitialized()
    {
        //subjectsService.OnChange += StateHasChanged;
    }
    protected void Dispose()
    {
        //subjectsService.OnChange -= StateHasChanged;
    }
}