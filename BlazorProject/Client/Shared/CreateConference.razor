@inject IEntityCRUDService<BlazorProject.Shared.Conference, Guid> conferencesService
@inject NavigationManager navManager

<div class="alert-link" style="max-width:50%;">
    <h3>@Title</h3>

    <EditForm Model="Conference" OnSubmit="HandleSubmit">
        <div class="form-group">
            <label for="name">Naslov predavanja:</label>
            <InputText id="name" class="form-control" @bind-Value="Conference.TalkTitle"></InputText>
            <ValidationMessage For="@(() => Conference.TalkTitle)" />
        </div>
        <div class="form-group">
            <label for="desc">Opomba:</label><br />
            <InputTextArea id="desc" class="form-control" @bind-Value="Conference.Remark"></InputTextArea>
        </div>
        <div class="form-group">
            <label for="lecH">Kraj:</label><br />
            <InputText id="lecH" class="form-control" @bind-Value="Conference.Place"></InputText>
        </div>
        <div class="form-group">
            <label for="tutH">Datum predavanja:</label><br />
            <InputDate id="tutH" class="form-control" @bind-Value="Conference.PresentationDate"></InputDate>
        </div>
        <div class="form-group">
            <label for="ects">Vabljeno predavanje:</label><br />
            <InputCheckbox id="ects" class="form-control" @bind-Value="Conference.IsInvitedTalk"></InputCheckbox>
        </div>
        <button class="btn btn-primary" type="submit">@SubmitButtonText</button>
        <button class="btn btn-primary" type="button" @onclick="HandleCancel">Prekliči</button>
    </EditForm>
</div>

@code
{
    [Parameter]
    public BlazorProject.Shared.Conference Conference { get; set; } = new BlazorProject.Shared.Conference();

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string SubmitButtonText { get; set; }

    protected async Task HandleSubmit()
    {
        if (Conference.ID == Guid.Empty)
            await conferencesService.CreateEntity(Conference);
        else
            await conferencesService.UpdateEntity(Conference, Conference.ID);
        navManager.NavigateTo("/conferences");
    }

    protected void HandleCancel()
    {
        navManager.NavigateTo("/conferences");
    }

    protected override void OnInitialized()
    {
        //subjectsService.OnChange += StateHasChanged;
    }
    protected void Dispose()
    {
        //subjectsService.OnChange -= StateHasChanged;
    }
}